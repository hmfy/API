const app = require('../app')
const debug = require('debug')('api:server')
const http2 = require('spdy')
const fs = require('fs')

// 端口号
const port = normalizePort(process.env.PORT || '3001')
app.set('port', port)

// 服务
const privateKey = fs.readFileSync('/project/API/ssl/fyang.fun.key', 'utf8')
const certificate = fs.readFileSync('/project/API/ssl/fyang.fun_bundle.crt', 'utf8')
const credentials = { key: privateKey, cert: certificate }
const server = http2.createServer(credentials, app)

// 监听
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// 异常
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// 监听
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
